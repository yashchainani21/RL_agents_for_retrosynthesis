"""
This script is used to enumerate all possible PKS products that can be generated by a chimeric type I PKS.
Chimeric PKSs were designed with RetroTide and vary in both the number of modules and domain architectures involved.
The smallest PKS designed comprises only a loading module while the largest PKS comprises three extension modules.
The product generated by each PKS is also released using both a cyclization and a thiolysis termination reaction.
This was done to as large of a PKS chemical space as possible.
Note that in this script, only bound products are generated.
The unbound products are only produced in the next script.
"""
import pickle
import bcs
from retrotide import structureDB
from rdkit import Chem
from collections import OrderedDict

all_starters_list = list(bcs.starters.keys())
num_extension_modules = 1

# initialize an empty dictionary to store all bcs-type PKS designs as keys and PKS products as values
all_PKS_designs_and_products_dict = {}

# iterate through all starter units
for starter in all_starters_list:

    # initialize a PKS loading module for the current PKS starter
    loading_AT_domain = bcs.AT(active = True,
                               substrate = starter)

    loading_module = bcs.Module(domains = OrderedDict({bcs.AT: loading_AT_domain}),
                                loading = True)

    # convert this loading module into a bcs cluster object and obtain the corresponding product
    modules_list = [loading_module]
    LM_cluster = bcs.Cluster(modules = modules_list)
    bound_LM_product = Chem.MolToSmiles(LM_cluster.computeProduct(structureDB))

    for i in range(0, num_extension_modules):
        for key in structureDB.keys():
            extension_modules = key
            modules_list.append(extension_modules)
            cluster = bcs.Cluster(modules = modules_list)
            bound_PKS_product = Chem.MolToSmiles(cluster.computeProduct(structureDB))

# pickle the generated data
with open('../data/raw/PKS_designs_and_products.pkl',"wb") as f:
    pickle.dump(all_PKS_designs_and_products_dict, f)